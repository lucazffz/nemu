package emulator

// @note These table are generated by AI (Google Gemini) based on the
// information from https://www.cpcwiki.eu/index.php/MOS_6502
//
// The integer values corresponds to the instruciton enums
//
// The idea of encoding instruction information in tables is inspired by
// Michael Fogleman's NES Emulator found here: https://github.com/fogleman/nes

instruction_type := [256]int{
	// 0x0X
	39, 3, 77, 60, 47, 3, 9, 60, 33, 3, 9, 73, 47, 3, 9, 60,
	// 0x1X
	48, 3, 77, 60, 47, 3, 9, 60, 43, 3, 47, 60, 47, 3, 9, 60,
	// 0x2X
	36, 1, 77, 58, 0, 1, 11, 58, 31, 1, 11, 74, 0, 1, 11, 58,
	// 0x3X
	49, 1, 77, 58, 47, 1, 11, 58, 42, 1, 47, 58, 47, 1, 11, 58,
	// 0x4X
	38, 2, 77, 61, 47, 2, 10, 61, 34, 2, 10, 71, 35, 2, 10, 61,
	// 0x5X
	50, 2, 77, 61, 47, 2, 10, 61, 41, 2, 47, 61, 47, 2, 10, 61,
	// 0x6X
	37, 4, 77, 59, 47, 4, 12, 59, 32, 4, 12, 72, 35, 4, 12, 59,
	// 0x7x
	51, 4, 77, 59, 47, 4, 12, 59, 40, 4, 47, 59, 47, 4, 12, 59,
	// 0x8X
	47, 22, 47, 63, 24, 22, 23, 63, 16, 47, 26, 69, 24, 22, 23, 63,
	// 0x9X
	52, 22, 77, 66, 24, 22, 23, 63, 28, 22, 30, 65, 68, 22, 67, 66,
	// 0xAX
	21, 19, 20, 62, 21, 19, 20, 62, 27, 19, 25, 70, 21, 19, 20, 62,
	// 0xBX
	53, 19, 77, 62, 21, 19, 20, 62, 46, 19, 29, 64, 21, 19, 20, 62,
	// 0xCX
	8, 6, 47, 56, 8, 6, 13, 56, 18, 6, 15, 75, 8, 6, 13, 56,
	// 0xDX
	54, 6, 77, 56, 47, 6, 13, 56, 45, 6, 47, 56, 47, 6, 13, 56,
	// 0xEX
	7, 5, 47, 57, 7, 5, 14, 57, 17, 5, 47, 76, 7, 5, 14, 57,
	// 0xFX
	55, 5, 77, 57, 47, 5, 14, 57, 44, 5, 47, 57, 47, 5, 14, 57,
}

instruction_addressing_mode := [256]int{
	// 0x0X
	0, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 7, 7, 7, 7,
	// 0x1X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x2X
	7, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 7, 7, 7, 7,
	// 0x3X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x4X
	0, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 7, 7, 7, 7,
	// 0x5X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x6X
	0, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 10, 7, 7, 7,
	// 0x7X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x8X
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0x9X
	6, 12, 0, 12, 4, 4, 5, 5, 0, 9, 0, 9, 8, 8, 9, 9,
	// 0xAX
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0xBX
	6, 12, 0, 12, 4, 4, 5, 5, 0, 9, 0, 9, 8, 8, 9, 9,
	// 0xCX
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0xDX
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0xEX
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0xFX
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
}

instruction_byte_size := [256]int{
	// 0x0X
	1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x1X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x2X
	3, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x3X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x4X
	1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x5X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x6X
	1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x7X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x8X
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x9X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0xAX
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0xBX
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0xCX
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0xDX
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0xEX
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0xFX
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
}

instruction_cycle_count := [256]int{
	// 0x0X
	7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6,
	// 0x1X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x2X
	6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6,
	// 0x3X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x4X
	6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6,
	// 0x5X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x6X
	6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6,
	// 0x7X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x8X
	2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	// 0x9X
	2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5,
	// 0xAX
	2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	// 0xBX
	2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4,
	// 0xCX
	2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,
	// 0xDX
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0xEX
	2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,
	// 0xFX
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
}

// @note Page boundary extra cycles for branch instructions (e.g., BPL, BMI) 
// are typically handled differently. The cycle count increases if the branch is taken,
// and again if the branch crosses a page. 
instruction_page_boundary_extra_cycles := [256]int{
	// 0x0X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x1X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x2X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x3X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x4X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x5X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x6X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x7X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x8X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x9X
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xAX
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xBX
	1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1,
	// 0xCX
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xDX
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0xEX
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xFX
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
}

instruction_category := [256]int{
	// 0x0X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,
	// 0x1X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x2X
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0x3X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x4X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0x5X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x6X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0x7X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x8X
	1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,
	// 0x9X
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 2, 2,
	// 0xAX
	0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1,
	// 0xBX
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0xCX
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0xDX
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0xEX
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0xFX
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
}

// @note These table are generated by AI (Google Gemini) based on the
// information from https://www.nesdev.org/wiki/PPU_palettes

// ppu_palette_2C02:= [64]u32{
// 0x656565, 0x002b9b, 0x110ec0, 0x3f00bc, 0x66008f, 0x7b0045, 0x790100,
// 0x601c00, 0x363800, 0x084f00, 0x005a00, 0x005702, 0x004555, 0x000000,
// }

// ppu_palette_2C02:= [64]u32{
// 	0x656565, 0x002B9B, 0x110EC0, 0x3F00BC, 0x66008F, 0x7B0045, 0x790100,
// 	0x601C00, 0x363800, 0x084F00, 0x005A00, 0x005702, 0x004555, 0x000000,
// 	0x000000, 0x000000,
// 	0xAEAEAE, 0x0761F5, 0x3E3BFF, 0x7C1DFF, 0xAF0EE5, 0xCB1383, 0xC82A15,
// 	0xA74D00, 0x6F7200, 0x329100, 0x009F00, 0x009B2A, 0x008498, 0x000000,
// 	0x000000, 0x000000,
// 	0xFFFFFF, 0x56B1FF, 0x8E8BFF, 0xCC6CFF, 0xFF5DFF, 0xFF62D4, 0xFF7964,
// 	0xF89D06, 0xC0C300, 0x81E200, 0x4DF116, 0x30EC7A, 0x34D5EA, 0x4E4E4E,
// 	0x000000, 0x000000,
// 	0xFFFFFF, 0xBADFFF, 0xD1D0FF, 0xEBC3FF, 0xFFBDFF, 0xFFBFFF, 0xFFC8C0,
// 	0xFCD799, 0xE5E784, 0xCCF387, 0xB6F3A0, 0xAAF8C9, 0xACEEF7, 0xB7B7B7,
// 	0x000000, 0x000000,
// }
// ppu_palette_2C02:= [64]u32{
//     0x656565FF, 0x002B9BFF, 0x110EC0FF, 0x3F00BCFF, 0x66008FFF, 0x7B0045FF, 0x790100FF,
//     0x601C00FF, 0x363800FF, 0x084F00FF, 0x005A00FF, 0x005702FF, 0x004555FF, 0x000000FF,
//     0x000000FF, 0x000000FF,
//     0xAEAEAEFF, 0x0761F5FF, 0x3E3BFFFF, 0x7C1DFFFF, 0xAF0EE5FF, 0xCB1383FF, 0xC82A15FF,
//     0xA74D00FF, 0x6F7200FF, 0x329100FF, 0x009F00FF, 0x009B2AFF, 0x008498FF, 0x000000FF,
//     0x000000FF, 0x000000FF,
//     0xFFFFFFff, 0x56B1FFFF, 0x8E8BFFFF, 0xCC6CFFFF, 0xFF5DFFFF, 0xFF62D4FF, 0xFF7964FF,
//     0xF89D06FF, 0xC0C300FF, 0x81E200FF, 0x4DF116FF, 0x30EC7AFF, 0x34D5EAFF, 0x4E4E4EFF,
//     0x000000FF, 0x000000FF,
//     0xFFFFFFff, 0xBADFFFFF, 0xD1D0FFFF, 0xEBC3FFFF, 0xFFBDFFFF, 0xFFBFFFFF, 0xFFC8C0FF,
//     0xFCD799FF, 0xE5E784FF, 0xCCF387FF, 0xB6F3A0FF, 0xAAF8C9FF, 0xACEEF7FF, 0xB7B7B7FF,
//     0x000000FF, 0x000000FF,
// }
// ppu_palette_2C02_rgba := [64]u32{
//     0x6C6C6CFF, 0x002068FF, 0x000084FF, 0x30008CFF, 0x640064FF, 0x78001CFF, 0x700000FF, 0x4C0C00FF,
//     0x242400FF, 0x003C00FF, 0x004000FF, 0x003C08FF, 0x002C40FF, 0x000000FF, 0x000000FF, 0x000000FF,
//     0xC4C4C4FF, 0x0078D0FF, 0x2038E8FF, 0x6820E8FF, 0xA814B4FF, 0xC8105CFF, 0xC42400FF, 0x904800FF,
//     0x546400FF, 0x007C00FF, 0x008000FF, 0x007C1CFF, 0x006478FF, 0x000000FF, 0x000000FF, 0x000000FF,
//     0xFFFFFFFF, 0x54B0FFFF, 0x7890FFFF, 0xB078FFFF, 0xF068F4FF, 0xFF64B8FF, 0xFF7850FF, 0xF4A428FF,
//     0xD0CC00FF, 0x78E000FF, 0x54EC5CFF, 0x54E894FF, 0x5CE4D8FF, 0x5CCCDCFF, 0x000000FF, 0x000000FF,
//     0xFFFFFFFF, 0xA4D0FFFF, 0xB8C8FFFF, 0xD0C0FFFF, 0xF4B8FFFF, 0xFFB8DDFF, 0xFFC4B8FF, 0xFFD8A8FF,
//     0xEEE87CFF, 0xC8F47CFF, 0xB4FCB0FF, 0xB4FCE0FF, 0xB8FCE8FF, 0xB8FCE8FF, 0x000000FF, 0x000000FF,
// }
ppu_palette_2C02 := [64]Color{
    {0x6C, 0x6C, 0x6C, 0xFF}, {0x00, 0x20, 0x68, 0xFF}, {0x00, 0x00, 0x84, 0xFF}, {0x30, 0x00, 0x8C, 0xFF},
    {0x64, 0x00, 0x64, 0xFF}, {0x78, 0x00, 0x1C, 0xFF}, {0x70, 0x00, 0x00, 0xFF}, {0x4C, 0x0C, 0x00, 0xFF},
    {0x24, 0x24, 0x00, 0xFF}, {0x00, 0x3C, 0x00, 0xFF}, {0x00, 0x40, 0x00, 0xFF}, {0x00, 0x3C, 0x08, 0xFF},
    {0x00, 0x2C, 0x40, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF},

    {0xC4, 0xC4, 0xC4, 0xFF}, {0x00, 0x78, 0xD0, 0xFF}, {0x20, 0x38, 0xE8, 0xFF}, {0x68, 0x20, 0xE8, 0xFF},
    {0xA8, 0x14, 0xB4, 0xFF}, {0xC8, 0x10, 0x5C, 0xFF}, {0xC4, 0x24, 0x00, 0xFF}, {0x90, 0x48, 0x00, 0xFF},
    {0x54, 0x64, 0x00, 0xFF}, {0x00, 0x7C, 0x00, 0xFF}, {0x00, 0x80, 0x00, 0xFF}, {0x00, 0x7C, 0x1C, 0xFF},
    {0x00, 0x64, 0x78, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF},

    {0xFF, 0xFF, 0xFF, 0xFF}, {0x54, 0xB0, 0xFF, 0xFF}, {0x78, 0x90, 0xFF, 0xFF}, {0xB0, 0x78, 0xFF, 0xFF},
    {0xF0, 0x68, 0xF4, 0xFF}, {0xFF, 0x64, 0xB8, 0xFF}, {0xFF, 0x78, 0x50, 0xFF}, {0xF4, 0xA4, 0x28, 0xFF},
    {0xD0, 0xCC, 0x00, 0xFF}, {0x78, 0xE0, 0x00, 0xFF}, {0x54, 0xEC, 0x5C, 0xFF}, {0x54, 0xE8, 0x94, 0xFF},
    {0x5C, 0xE4, 0xD8, 0xFF}, {0x5C, 0xCC, 0xDC, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF},

    {0xFF, 0xFF, 0xFF, 0xFF}, {0xA4, 0xD0, 0xFF, 0xFF}, {0xB8, 0xC8, 0xFF, 0xFF}, {0xD0, 0xC0, 0xFF, 0xFF},
    {0xF4, 0xB8, 0xFF, 0xFF}, {0xFF, 0xB8, 0xDD, 0xFF}, {0xFF, 0xC4, 0xB8, 0xFF}, {0xFF, 0xD8, 0xA8, 0xFF},
    {0xEE, 0xE8, 0x7C, 0xFF}, {0xC8, 0xF4, 0x7C, 0xFF}, {0xB4, 0xFC, 0xB0, 0xFF}, {0xB4, 0xFC, 0xE0, 0xFF},
    {0xB8, 0xFC, 0xE8, 0xFF}, {0xB8, 0xFC, 0xE8, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x00, 0x00, 0x00, 0xFF},
}
