package nemu

// @note These table are generated by AI (Google Gemini) based on the
// information from https://www.cpcwiki.eu/index.php/MOS_6502
//
// The integer values corresponds to the instruciton enums
//
// The idea of encoding instruction information in tables is inspired by
// Michael Fogleman's NES Emulator found here: https://github.com/fogleman/nes

instruction_type := [256]int{
	// 0x0X
	39, 3, 77, 60, 47, 3, 9, 60, 33, 3, 9, 73, 47, 3, 9, 60,
	// 0x1X
	48, 3, 77, 60, 47, 3, 9, 60, 43, 3, 47, 60, 47, 3, 9, 60,
	// 0x2X
	36, 1, 77, 58, 0, 1, 11, 58, 31, 1, 11, 74, 0, 1, 11, 58,
	// 0x3X
	49, 1, 77, 58, 47, 1, 11, 58, 42, 1, 47, 58, 47, 1, 11, 58,
	// 0x4X
	38, 2, 77, 61, 47, 2, 10, 61, 34, 2, 10, 71, 35, 2, 10, 61,
	// 0x5X
	50, 2, 77, 61, 47, 2, 10, 61, 41, 2, 47, 61, 47, 2, 10, 61,
	// 0x6X
	37, 4, 77, 59, 47, 4, 12, 59, 32, 4, 12, 72, 35, 4, 12, 59,
	// 0x7x
	51, 4, 77, 59, 47, 4, 12, 59, 40, 4, 47, 59, 47, 4, 12, 59,
	// 0x8X
	47, 22, 47, 63, 24, 22, 23, 63, 16, 47, 26, 69, 24, 22, 23, 63,
	// 0x9X
	52, 22, 77, 66, 24, 22, 23, 63, 28, 22, 30, 65, 68, 22, 67, 66,
	// 0xAX
	21, 19, 20, 62, 21, 19, 20, 62, 27, 19, 25, 70, 21, 19, 20, 62,
	// 0xBX
	53, 19, 77, 62, 21, 19, 20, 62, 46, 19, 29, 64, 21, 19, 20, 62,
	// 0xCX
	8, 6, 47, 56, 8, 6, 13, 56, 18, 6, 15, 75, 8, 6, 13, 56,
	// 0xDX
	54, 6, 77, 56, 47, 6, 13, 56, 45, 6, 47, 56, 47, 6, 13, 56,
	// 0xEX
	7, 5, 47, 57, 7, 5, 14, 57, 17, 5, 47, 76, 7, 5, 14, 57,
	// 0xFX
	55, 5, 77, 57, 47, 5, 14, 57, 44, 5, 47, 57, 47, 5, 14, 57,
}

instruction_addressing_mode := [256]int{
	// 0x0X
	0, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 7, 7, 7, 7,
	// 0x1X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x2X
	7, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 7, 7, 7, 7,
	// 0x3X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x4X
	0, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 7, 7, 7, 7,
	// 0x5X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x6X
	0, 11, 0, 11, 3, 3, 3, 3, 0, 2, 1, 2, 10, 7, 7, 7,
	// 0x7X
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0x8X
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0x9X
	6, 12, 0, 12, 4, 4, 5, 5, 0, 9, 0, 9, 8, 8, 9, 9,
	// 0xAX
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0xBX
	6, 12, 0, 12, 4, 4, 5, 5, 0, 9, 0, 9, 8, 8, 9, 9,
	// 0xCX
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0xDX
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
	// 0xEX
	2, 11, 2, 11, 3, 3, 3, 3, 0, 2, 0, 2, 7, 7, 7, 7,
	// 0xFX
	6, 12, 0, 12, 4, 4, 4, 4, 0, 9, 0, 9, 8, 8, 8, 8,
}

instruction_byte_size := [256]int{
	// 0x0X
	1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x1X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x2X
	3, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x3X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x4X
	1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x5X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x6X
	1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x7X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0x8X
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0x9X
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0xAX
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0xBX
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0xCX
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0xDX
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
	// 0xEX
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	// 0xFX
	2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 3, 3, 3, 3,
}

instruction_cycle_count := [256]int{
	// 0x0X
	7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6,
	// 0x1X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x2X
	6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6,
	// 0x3X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x4X
	6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6,
	// 0x5X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x6X
	6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6,
	// 0x7X
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0x8X
	2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	// 0x9X
	2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5,
	// 0xAX
	2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	// 0xBX
	2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4,
	// 0xCX
	2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,
	// 0xDX
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	// 0xEX
	2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,
	// 0xFX
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
}

// @note Page boundary extra cycles for branch instructions (e.g., BPL, BMI) 
// are typically handled differently. The cycle count increases if the branch is taken,
// and again if the branch crosses a page. 
instruction_page_boundary_extra_cycles := [256]int{
	// 0x0X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x1X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x2X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x3X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x4X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x5X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x6X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x7X
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0x8X
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0x9X
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xAX
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xBX
	1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1,
	// 0xCX
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xDX
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	// 0xEX
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0xFX
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
}

instruction_category := [256]int{
	// 0x0X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,
	// 0x1X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x2X
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0x3X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x4X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0x5X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x6X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0x7X
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0x8X
	1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,
	// 0x9X
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 2, 2,
	// 0xAX
	0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1,
	// 0xBX
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0xCX
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0xDX
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
	// 0xEX
	0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
	// 0xFX
	0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
}
